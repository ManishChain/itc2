{"version":3,"file":"statefulomnibusbond.js","sourceRoot":"","sources":["../../test/statefulomnibusbond.ts"],"names":[],"mappings":"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","sourcesContent":["import { StatefulOmnibusBondInstance } from '../types/truffle-contracts/StatefulOmnibusBond';\nimport { BondManagerContract, BondManagerInstance } from '../types/truffle-contracts/BondManager';\nimport {\n  GateKeeperInstance,\n  GateKeeperContract,\n  StatefulOmnibusBondRegistryInstance,\n  StatefulOmnibusBondContract,\n  StatefulOmnibusBondRegistryContract,\n  StatefulOmnibusBondFactoryContract,\n  StatefulOmnibusBondFactoryInstance,\n  AdminRoleRegistryContract,\n  MakerRoleRegistryContract,\n  CheckerRoleRegistryContract,\n  AdminRoleRegistryInstance,\n  CheckerRoleRegistryInstance,\n  MakerRoleRegistryInstance,\n  BondManagerRegistryContract,\n  BondManagerRegistryInstance,\n  BondManagerFactoryContract,\n  BondManagerFactoryInstance,\n} from 'types/truffle-contracts';\nimport { createPermission, grantPermission } from '@settlemint/enteth-migration-utils';\nimport faker from 'faker';\nimport dayjs from 'dayjs';\nimport web3 from 'web3';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { storeIpfsHash } = require('../truffle-config.js'); // one dir up, because it is compiled into ./dist/migrations\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst UIDefinitionsBondManager = require('../contracts/statefulomnibusbonds/UIDefinitionsBondManager.json');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst UIDefinitionsSOB = require('../contracts/statefulomnibusbonds/UIDefinitionsSOB.json');\n\nconst GateKeeper: GateKeeperContract = artifacts.require('GateKeeper');\nconst StatefulOmnibusBondRegistry: StatefulOmnibusBondRegistryContract = artifacts.require(\n  'StatefulOmnibusBondRegistry'\n);\nconst StatefulOmnibusBond: StatefulOmnibusBondContract = artifacts.require('StatefulOmnibusBond');\nconst StatefulOmnibusBondFactory: StatefulOmnibusBondFactoryContract = artifacts.require('StatefulOmnibusBondFactory');\nconst AdminRoleRegistry: AdminRoleRegistryContract = artifacts.require('AdminRoleRegistry');\nconst MakerRoleRegistry: MakerRoleRegistryContract = artifacts.require('MakerRoleRegistry');\nconst CheckerRoleRegistry: CheckerRoleRegistryContract = artifacts.require('CheckerRoleRegistry');\nconst BondManager: BondManagerContract = artifacts.require('BondManager');\nconst BondManagerRegistry: BondManagerRegistryContract = artifacts.require('BondManagerRegistry');\nconst BondManagerFactory: BondManagerFactoryContract = artifacts.require('BondManagerFactory');\n\ncontract('StatefulOmnibusBond and BondManager', (accounts: string[]) => {\n  let gateKeeper: GateKeeperInstance;\n  let statefulOmnibusBond: StatefulOmnibusBondInstance;\n  let statefulOmnibusBondRegistry: StatefulOmnibusBondRegistryInstance;\n  let statefulOmnibusBondFactory: StatefulOmnibusBondFactoryInstance;\n  let bondManagerFactory: BondManagerFactoryInstance;\n  let admin: AdminRoleRegistryInstance;\n  let checker: CheckerRoleRegistryInstance;\n  let maker: MakerRoleRegistryInstance;\n  let roles: any[];\n\n  const interest = faker.random.number(15) + 1;\n  const issuanceDate = dayjs();\n  const duration = 1 * 12;\n  const maturityDate = issuanceDate.add(duration, 'month');\n  const periodString = 'ANN'; // 'SEMI';\n  const parValue = 1 * 1000;\n\n  const statefulOmnibusBondProperties = {\n    name: `BOND ${interest}% ${maturityDate.format('YY-MM-DD')} ${periodString}`,\n    symbol: `BONDY`,\n    isin: faker.finance.iban(),\n    frequency: web3.utils.fromUtf8(periodString),\n    interest,\n    decimals: 3,\n    issuer: faker.company.companyName(),\n    maturityDate: maturityDate.unix(),\n    issuanceDate: issuanceDate.unix(),\n    currency: 'Singapore Dollar',\n    parValue,\n    couponRate: Math.floor((interest / 100) * parValue),\n  };\n\n  let ipfsHash: string;\n\n  // Setting up bond manager variables for testing\n  let bondManager: BondManagerInstance;\n  let bondManagerRegistry: BondManagerRegistryInstance;\n\n  const accountWM = 'WealthManagement';\n  const account2 = faker.finance.iban();\n\n  const burnRequestComment1 = `Burn 500 tokens for account ${accountWM}`;\n  const burnRequestComment2 = `Burn 300 tokens for account ${accountWM}`;\n  const burnApproveComment = `Burning of 500 tokens for ${accountWM} is approved`;\n  const burnDenyComment = `Burning of 300 tokens for ${accountWM} is denied`;\n\n  const mintRequestComment1 = `Mint 500 tokens for account ${accountWM}`;\n  const mintRequestComment2 = `Mint 300 tokens for account ${accountWM}`;\n  const mintApproveComment = `Minting of 500 tokens for ${accountWM} is approved`;\n  const mintDenyComment = `Minting of 300 tokens for ${accountWM} is denied`;\n\n  before(async function () {\n    // Deploy gateKeeper contract\n    gateKeeper = await GateKeeper.new();\n\n    // Deploy role registry contracts\n    admin = await AdminRoleRegistry.new(gateKeeper.address);\n    checker = await CheckerRoleRegistry.new(gateKeeper.address);\n    maker = await MakerRoleRegistry.new(gateKeeper.address);\n    roles = [admin, checker, maker];\n\n    // Give the 'DESIGNATE_ROLE' to accounts[0] for the three role registries\n    // This allows accounts[0] to designate these roles to other accounts (and itself) since its msg.sender\n    await createPermission(gateKeeper, admin, 'DESIGNATE_ROLE', accounts[0], accounts[0]);\n    await createPermission(gateKeeper, maker, 'DESIGNATE_ROLE', accounts[0], accounts[0]);\n    await createPermission(gateKeeper, checker, 'DESIGNATE_ROLE', accounts[0], accounts[0]);\n\n    // designate the ADMIN_ROLE to accounts[0]\n    await admin.designate(accounts[0]);\n\n    // deploy a new statefulbond registry contract\n    statefulOmnibusBondRegistry = await StatefulOmnibusBondRegistry.new(gateKeeper.address);\n    bondManagerRegistry = await BondManagerRegistry.new(gateKeeper.address);\n\n    // The INSERT_STATEMACHINE_ROLE permission allows accounts[0]\n    // to add a statemachine instance to the statemachine registry\n    // In this case it means adding the statefulbond contract to the statefulbond registry\n    await createPermission(\n      gateKeeper,\n      statefulOmnibusBondRegistry,\n      'INSERT_STATEMACHINE_ROLE',\n      accounts[0],\n      accounts[0]\n    );\n\n    await createPermission(gateKeeper, bondManagerRegistry, 'INSERT_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n\n    bondManagerFactory = await BondManagerFactory.new(gateKeeper.address, bondManagerRegistry.address);\n\n    await createPermission(gateKeeper, bondManagerFactory, 'CREATE_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n    await createPermission(gateKeeper, bondManagerFactory, 'UPDATE_UIFIELDDEFINITIONS_ROLE', accounts[0], accounts[0]);\n\n    statefulOmnibusBondFactory = await StatefulOmnibusBondFactory.new(\n      gateKeeper.address,\n      statefulOmnibusBondRegistry.address,\n      bondManagerFactory.address\n    );\n\n    await createPermission(\n      gateKeeper,\n      statefulOmnibusBondFactory,\n      'CREATE_STATEMACHINE_ROLE',\n      accounts[0],\n      accounts[0]\n    );\n    await createPermission(\n      gateKeeper,\n      statefulOmnibusBondFactory,\n      'UPDATE_UIFIELDDEFINITIONS_ROLE',\n      accounts[0],\n      accounts[0]\n    );\n\n    for (const role of roles) {\n      await grantPermission(gateKeeper, bondManagerFactory, 'CREATE_STATEMACHINE_ROLE', role.address);\n      await grantPermission(gateKeeper, statefulOmnibusBondFactory, 'CREATE_STATEMACHINE_ROLE', role.address);\n    }\n\n    await grantPermission(\n      gateKeeper,\n      statefulOmnibusBondRegistry,\n      'INSERT_STATEMACHINE_ROLE',\n      statefulOmnibusBondFactory.address\n    );\n    await grantPermission(gateKeeper, bondManagerRegistry, 'INSERT_STATEMACHINE_ROLE', bondManagerFactory.address);\n\n    const bondMgrUIHash = await storeIpfsHash(UIDefinitionsBondManager);\n    const statefulOBUIHash = await storeIpfsHash(UIDefinitionsSOB);\n\n    await statefulOmnibusBondFactory.setUIFieldDefinitionsHash(statefulOBUIHash);\n    await bondManagerFactory.setUIFieldDefinitionsHash(bondMgrUIHash);\n\n    // Store the necessary stateful omnibus bond metadata on ipfs\n    ipfsHash = await storeIpfsHash({\n      isin: statefulOmnibusBondProperties.isin,\n      issuer: statefulOmnibusBondProperties.issuer,\n      maturityDate: statefulOmnibusBondProperties.maturityDate,\n      issuanceDate: statefulOmnibusBondProperties.issuanceDate,\n      currency: statefulOmnibusBondProperties.currency,\n    });\n\n    // Create a fresh stateful omnibus bond instance\n    statefulOmnibusBond = await StatefulOmnibusBond.new(\n      statefulOmnibusBondProperties.name,\n      statefulOmnibusBondProperties.symbol,\n      statefulOmnibusBondProperties.parValue,\n      statefulOmnibusBondProperties.couponRate,\n      statefulOmnibusBondProperties.decimals,\n      statefulOmnibusBondProperties.frequency,\n      gateKeeper.address,\n      ipfsHash,\n      statefulOBUIHash\n    );\n\n    // Give all admin the roles to accounts[0]\n    ['MINT_ROLE', 'BURN_ROLE', 'ROLE_ADMIN']\n      // convert each role string to a bytes32\n      .map((role: string) => web3.utils.fromUtf8(role))\n      // Give accounts[0] the roles for the contract instance\n      .forEach(async (role: string) => {\n        gateKeeper.createPermission(accounts[0], statefulOmnibusBond.address, role, accounts[0]);\n      });\n\n    bondManager = await BondManager.new(gateKeeper.address, statefulOmnibusBond.address, 'BOND 1', bondMgrUIHash);\n\n    await gateKeeper.grantPermission(\n      bondManager.address,\n      statefulOmnibusBond.address,\n      web3.utils.fromUtf8('MINT_ROLE')\n    );\n\n    await gateKeeper.grantPermission(\n      bondManager.address,\n      statefulOmnibusBond.address,\n      web3.utils.fromUtf8('BURN_ROLE')\n    );\n\n    await gateKeeper.createPermission(accounts[0], bondManager.address, web3.utils.fromUtf8('ROLE_ADMIN'), accounts[0]);\n  });\n\n  describe('State transitions and state specific methods', () => {\n    it('have the correct initial state', async () => {\n      expect(await statefulOmnibusBond.getCurrentState()).to.be.equal(\n        web3.utils.fromUtf8('STATE_CREATED').padEnd(66, '0')\n      );\n    });\n\n    it('should only be possible for maker and admin to edit', async () => {\n      expect((await statefulOmnibusBond.canEdit()).map((l) => web3.utils.toUtf8(l)).includes('ROLE_ADMIN')).to.be.equal(\n        true\n      );\n      expect((await statefulOmnibusBond.canEdit()).map((l) => web3.utils.toUtf8(l)).includes('ROLE_MAKER')).to.be.equal(\n        true\n      );\n      expect(\n        (await statefulOmnibusBond.canEdit()).map((l) => web3.utils.toUtf8(l)).includes('ROLE_CHECKER')\n      ).to.be.equal(false);\n    });\n\n    it('edit the contract in the initial state', async () => {\n      expect(await (await statefulOmnibusBond.decimals()).toNumber()).to.be.equal(3);\n      await statefulOmnibusBond.edit(\n        statefulOmnibusBondProperties.name,\n        statefulOmnibusBondProperties.symbol,\n        statefulOmnibusBondProperties.parValue,\n        statefulOmnibusBondProperties.couponRate,\n        2,\n        statefulOmnibusBondProperties.frequency,\n        ipfsHash\n      );\n      expect(await (await statefulOmnibusBond.decimals()).toNumber()).to.be.equal(2);\n    });\n\n    it('execute mint request should be rejected if bond is not in active state', async () => {\n      let errorMsg;\n      await bondManager\n        .createMintRequest(500, 10000, web3.utils.fromUtf8('NO'), mintRequestComment1)\n        .catch((err) => (errorMsg = err));\n      expect(`${errorMsg}`.includes('The bond must be in active state')).to.be.equal(true);\n    });\n\n    it('TO_REVIEW', async () => {\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_TO_REVIEW'));\n      expect(await statefulOmnibusBond.getCurrentState()).to.be.equal(\n        web3.utils.fromUtf8('STATE_TO_REVIEW').padEnd(66, '0')\n      );\n    });\n\n    it('CHANGES_NEEDED', async () => {\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_CHANGES_NEEDED'));\n      expect(await statefulOmnibusBond.getCurrentState()).to.be.equal(\n        web3.utils.fromUtf8('STATE_CHANGES_NEEDED').padEnd(66, '0')\n      );\n    });\n\n    it('edit in state changes needed', async () => {\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_TO_REVIEW'));\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_CHANGES_NEEDED'));\n\n      expect(await statefulOmnibusBond.symbol()).to.be.equal(statefulOmnibusBondProperties.symbol);\n      await statefulOmnibusBond.edit(\n        statefulOmnibusBondProperties.name,\n        'SYMB',\n        statefulOmnibusBondProperties.parValue,\n        statefulOmnibusBondProperties.couponRate,\n        statefulOmnibusBondProperties.decimals,\n        statefulOmnibusBondProperties.frequency,\n        ipfsHash\n      );\n      expect(await statefulOmnibusBond.symbol()).to.be.equal('SYMB');\n    });\n\n    it('ACTIVE and call the launch callback method', async () => {\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_TO_REVIEW'));\n      expect(await (await statefulOmnibusBond._launchDate()).toNumber()).to.be.equal(0);\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_ACTIVE'));\n      expect(await statefulOmnibusBond.getCurrentState()).to.be.equal(\n        web3.utils.fromUtf8('STATE_ACTIVE').padEnd(66, '0')\n      );\n      expect(await (await statefulOmnibusBond._launchDate()).toNumber()).to.not.be.equal(0);\n    });\n  });\n\n  describe('Decimals', () => {\n    it('a value of 2 for the par value', async () => {\n      expect(await (await statefulOmnibusBond.getDecimalsFor(web3.utils.fromUtf8('_parValue'))).toNumber()).to.be.equal(\n        2\n      );\n    });\n\n    it('return the decimal value defined in the factory (3)', async () => {\n      expect(await (await statefulOmnibusBond.getDecimalsFor(web3.utils.fromUtf8('amount'))).toNumber()).to.be.equal(\n        statefulOmnibusBondProperties.decimals\n      );\n    });\n  });\n\n  describe('Creating Burn or Mint Requests', () => {\n    it('get roles array', async () => {\n      await (await bondManager.getRoles())\n        .map((bytes32Role) => web3.utils.toUtf8(bytes32Role))\n        .forEach((role: string) => {\n          expect(['ROLE_ADMIN', 'ROLE_MAKER', 'ROLE_CHECKER'].includes(role)).to.be.equal(true);\n        });\n    });\n\n    it('request a mint transaction', async () => {\n      await bondManager.createMintRequest(500, 10000, web3.utils.fromUtf8('NO'), mintRequestComment1);\n\n      const [status, rType, index, amount, price, , account, requestComment, approveOrDenyComment] = Object.values(\n        await bondManager.getByIndex(0)\n      );\n\n      expect(web3.utils.toUtf8(`${rType}`)).to.be.equal('MINT');\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('PENDING');\n      expect(index.toString()).to.be.equal('0');\n      expect(amount.toString()).to.be.equal('500');\n      expect(price.toString()).to.be.equal('10000');\n      expect(requestComment).to.be.equal(mintRequestComment1);\n      expect(approveOrDenyComment).to.be.equal('');\n      expect(account).to.be.equal(accountWM);\n    });\n\n    it('approve a mint transaction', async () => {\n      await bondManager.approveRequest(0, mintApproveComment);\n\n      const [status, rType, index, amount, price, , account, requestComment, approveOrDenyComment] = Object.values(\n        await bondManager.getByIndex(0)\n      );\n\n      expect(web3.utils.toUtf8(`${rType}`)).to.be.equal('MINT');\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('COMPLETED');\n      expect(index.toString()).to.be.equal('0');\n      expect(amount.toString()).to.be.equal('500');\n      expect(price.toString()).to.be.equal('10000');\n      expect(requestComment).to.be.equal(mintRequestComment1);\n      expect(approveOrDenyComment).to.be.equal(mintApproveComment);\n      expect(account).to.be.equal(accountWM);\n    });\n\n    it('after mint transaction approved, token must be minted', async () => {\n      const [, , , , , , account] = Object.values(await bondManager.getByIndex(0));\n      expect(await (await statefulOmnibusBond.balanceOf(`${account}`)).toString()).to.be.equal('500');\n    });\n\n    it('deny a mint transaction', async () => {\n      await bondManager.createMintRequest(300, 6000, web3.utils.fromUtf8('NO'), mintRequestComment2);\n      await bondManager.denyRequest(1, mintDenyComment);\n\n      const [status, rType, index, amount, price, , account, requestComment, approveOrDenyComment] = Object.values(\n        await bondManager.getByIndex(1)\n      );\n\n      expect(web3.utils.toUtf8(`${rType}`)).to.be.equal('MINT');\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('DENIED');\n      expect(index.toString()).to.be.equal('1');\n      expect(amount.toString()).to.be.equal('300');\n      expect(price.toString()).to.be.equal('6000');\n      expect(requestComment).to.be.equal(mintRequestComment2);\n      expect(approveOrDenyComment).to.be.equal(mintDenyComment);\n      expect(account).to.be.equal(accountWM);\n    });\n\n    it('denied transaction cannot be approved', async () => {\n      let errorMsg;\n      const [status, , index] = Object.values(await bondManager.getByIndex(1));\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('DENIED');\n      await bondManager.approveRequest(index, mintApproveComment).catch((err) => (errorMsg = err));\n      expect(`${errorMsg}`.includes('The request should be pending')).to.be.equal(true);\n    });\n\n    it('request a burn transaction', async () => {\n      await bondManager.createBurnRequest(200, 10000, accountWM, burnRequestComment1);\n      const [status, rType, index, amount, price, , account, requestComment, approveOrDenyComment] = Object.values(\n        await bondManager.getByIndex(2)\n      );\n\n      expect(web3.utils.toUtf8(`${rType}`)).to.be.equal('BURN');\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('PENDING');\n      expect(index.toString()).to.be.equal('2');\n      expect(amount.toString()).to.be.equal('200');\n      expect(price.toString()).to.be.equal('10000');\n      expect(requestComment).to.be.equal(burnRequestComment1);\n      expect(approveOrDenyComment).to.be.equal('');\n      expect(account).to.be.equal(accountWM);\n    });\n\n    it('approve a burn transaction', async () => {\n      await bondManager.approveRequest(2, burnApproveComment);\n\n      const [status, rType, index, amount, price, , account, requestComment, approveOrDenyComment] = Object.values(\n        await bondManager.getByIndex(2)\n      );\n\n      expect(web3.utils.toUtf8(`${rType}`)).to.be.equal('BURN');\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('COMPLETED');\n      expect(index.toString()).to.be.equal('2');\n      expect(amount.toString()).to.be.equal('200');\n      expect(price.toString()).to.be.equal('10000');\n      expect(requestComment).to.be.equal(burnRequestComment1);\n      expect(approveOrDenyComment).to.be.equal(burnApproveComment);\n      expect(account).to.be.equal(accountWM);\n    });\n\n    it('after burn transaction approved, token must be burnt', async () => {\n      const [, , , , , , account] = Object.values(await bondManager.getByIndex(2));\n      expect(await (await statefulOmnibusBond.balanceOf(`${account}`)).toString()).to.be.equal('300'); // 500 - 200\n    });\n\n    it('deny a burn transaction', async () => {\n      await bondManager.createBurnRequest(300, 6000, account2, burnRequestComment2);\n      await bondManager.denyRequest(3, burnDenyComment);\n\n      const [status, rType, index, amount, price, , account, requestComment, approveOrDenyComment] = Object.values(\n        await bondManager.getByIndex(3)\n      );\n\n      expect(web3.utils.toUtf8(`${rType}`)).to.be.equal('BURN');\n      expect(web3.utils.toUtf8(`${status}`)).to.be.equal('DENIED');\n      expect(index.toString()).to.be.equal('3');\n      expect(amount.toString()).to.be.equal('300');\n      expect(price.toString()).to.be.equal('6000');\n      expect(requestComment).to.be.equal(burnRequestComment2);\n      expect(approveOrDenyComment).to.be.equal(burnDenyComment);\n      expect(account).to.be.equal(account2);\n    });\n  });\n\n  describe('Bond related', () => {\n    it('transfer tokenized bonds in the active state', async () => {\n      const holder1Balance = await statefulOmnibusBond.balanceOf(accountWM);\n      await statefulOmnibusBond.transfer(accountWM, account2, holder1Balance.div(web3.utils.toBN(2)), 10000);\n      expect(await (await statefulOmnibusBond.balanceOf(accountWM)).toString()).to.be.equal(\n        holder1Balance.div(web3.utils.toBN(2)).toString()\n      );\n      expect(await (await statefulOmnibusBond.balanceOf(account2)).toString()).to.be.equal(\n        holder1Balance.div(web3.utils.toBN(2)).toString()\n      );\n    });\n\n    it('MATURED and mature', async () => {\n      expect(await (await statefulOmnibusBond.balanceOf(accountWM)).toString()).to.not.be.equal('0');\n      expect(await (await statefulOmnibusBond.balanceOf(account2)).toString()).to.not.be.equal('0');\n      await statefulOmnibusBond.transitionState(web3.utils.fromUtf8('STATE_MATURED'));\n      expect(await statefulOmnibusBond.getCurrentState()).to.be.equal(\n        web3.utils.fromUtf8('STATE_MATURED').padEnd(66, '0')\n      );\n      expect(await (await statefulOmnibusBond.balanceOf(accountWM)).toString()).to.be.equal('0');\n      expect(await (await statefulOmnibusBond.balanceOf(account2)).toString()).to.be.equal('0');\n    });\n  });\n\n  describe('Holder iban and balance getters', () => {\n    it('number of token holders', async () => {\n      expect(await (await statefulOmnibusBond.getIndexLength()).toNumber()).to.be.equal(2);\n    });\n\n    it('info and balance for an index', async () => {\n      const holder1Info = await statefulOmnibusBond.getByIndex(0);\n      const holder1Balance = await statefulOmnibusBond.balanceOf(accountWM);\n      expect((holder1Info as any).holder).to.be.equal(accountWM);\n      expect((holder1Info as any).balance.toString()).to.be.equal(holder1Balance.toString());\n    });\n\n    it('an iban account', async () => {\n      const holder1Info = await statefulOmnibusBond.getByKey(accountWM);\n      const holder1Balance = await statefulOmnibusBond.balanceOf(accountWM);\n      expect((holder1Info as any).holder).to.be.equal(accountWM);\n      expect((holder1Info as any).balance.toString()).to.be.equal(holder1Balance.toString());\n    });\n  });\n});\n"]}