{"version":3,"file":"share.js","sourceRoot":"","sources":["../../test/share.ts"],"names":[],"mappings":";;;;;AAAA,+EAM4C;AAC5C,kDAA0B;AAC1B,gDAAwB;AAOxB,8DAA8D;AAC9D,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,6DAA6D;AAExH,MAAM,KAAK,GAAkB,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACxD,MAAM,YAAY,GAAyB,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7E,MAAM,aAAa,GAA0B,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;AAChF,MAAM,UAAU,GAAuB,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AAEvE,MAAM,QAAQ,GAAG,CAAC,CAAC;AACnB,MAAM,IAAI,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,MAAM,GAAG,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;AAChD,MAAM,KAAK,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;AAClD,MAAM,IAAI,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;AACjD,MAAM,OAAO,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAErF,QAAQ,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,EAAE;IAC7B,IAAI,UAA8B,CAAC;IACnC,IAAI,QAAuB,CAAC;IAC5B,IAAI,eAAqC,CAAC;IAC1C,IAAI,gBAAuC,CAAC;IAE5C,KAAK,UAAU,cAAc,CAAC,EAA+B,EAAE,IAAY,EAAE,EAAU,EAAE,MAAU;QACjG,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,gBAAgB,SAAS,CAAC,QAAQ,EAAE,cAAc,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACpG,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;YACxB,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,EAAE;YACX,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE;SACzB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK;QACV,UAAU,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,CAAC;QACpC,gBAAgB,GAAG,MAAM,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC/D,MAAM,yCAAgB,CAAC,UAAU,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAClG,eAAe,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;QACvF,MAAM,yCAAgB,CAAC,UAAU,EAAE,eAAe,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACnG,MAAM,wCAAe,CAAC,UAAU,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;QAChG,MAAM,wCAAe,CAAC,UAAU,EAAE,UAAU,EAAE,yBAAyB,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;QAClG,MAAM,yCAAgB,CAAC,UAAU,EAAE,eAAe,EAAE,gCAAgC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAChH,8DAA8D;QAC9D,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC,CAAC;QACnF,MAAM,eAAe,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,EAAE,GAAG,MAAM,eAAe,CAAC,WAAW,CAAC,eAAK,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,QAAQ,CAAC,CAAC;QACrF,MAAM,eAAe,GAAG,gDAAuB,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;QACpE,mCAAmC;QACnC,QAAQ,GAAG,MAAQ,KAAK,CAAC,EAAE,CAAC,eAAe,CAAoC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrF,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtF,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtF,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACpF,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC3E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrF,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrF,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,IAAI,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC3E,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1D,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACvE,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAClE,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7F,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACpF,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK;YACzD,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACjE,MAAM,mCAAU,CACd,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EACtE,+EAA+E,CAChF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACjE,MAAM,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7F,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACpF,MAAM,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,sBAAsB,GAAG,MAAM,eAAe,CAAC,yBAAyB,EAAE,CAAC;YACjF,MAAM,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,6BAA6B,GAAG,MAAM,eAAe,CAAC,yBAAyB,EAAE,CAAC;YACxF,MAAM,sBAAsB,GAAG,MAAM,QAAQ,CAAC,uBAAuB,EAAE,CAAC;YACxE,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,6BAA6B,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAC/B,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClD,kCAAS,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACpE,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,IAAI,EAAE,4CAA4C;gBAClD,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE;aACvB,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvC,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACxD,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACjD,kCAAS,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACrE,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,4CAA4C;gBAChD,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE;aACtB,CAAC,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YAC/B,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvC,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACxD,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5E,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE;aACtB,CAAC,CAAC;YACH,MAAM,gBAAgB,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5D,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4DAA4D,EAAE,GAAG,EAAE;QAC1E,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvC,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACxD,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,cAAI,CAAC,KAAK,CAAC,UAAU,CAAC,wBAAwB,CAAC,EAAE;gBAC9G,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;aAClB,CAAC,CAAC;YACH,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;aACxB,CAAC,CAAC;YACH,kCAAS,CAAC,EAAE,EAAE,cAAc,EAAE;gBAC5B,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,IAAI,EAAE,cAAI,CAAC,KAAK,CAAC,UAAU,CAAC,wBAAwB,CAAC;aACtD,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvD,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4DAA4D,EAAE,GAAG,EAAE;QAC1E,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACpC,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACvC,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACjE,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACxE,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;aACxB,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvD,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4EAA4E,EAAE,GAAG,EAAE;QAC1F,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,yBAAyB;YAClE,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAClE,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAC5C,QAAQ,CAAC,CAAC,CAAC,EACX,QAAQ,CAAC,CAAC,CAAC,EACX,KAAK,EACL,cAAI,CAAC,KAAK,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAChD,CAAC;YACF,kCAAS,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;aACxB,CAAC,CAAC;YACH,kCAAS,CAAC,EAAE,EAAE,cAAc,EAAE;gBAC5B,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACf,IAAI,EAAE,cAAI,CAAC,KAAK,CAAC,UAAU,CAAC,wBAAwB,CAAC;aACtD,CAAC,CAAC;YACH,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvD,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  createPermission,\n  getNewAddressFromEvents,\n  grantPermission,\n  testEvent,\n  testRevert,\n} from '@settlemint/enteth-migration-utils';\nimport faker from 'faker';\nimport Web3 from 'web3';\n\nimport { GateKeeperContract, GateKeeperInstance } from '../types/truffle-contracts/GateKeeper';\nimport { ShareContract, ShareInstance } from '../types/truffle-contracts/Share';\nimport { ShareFactoryContract, ShareFactoryInstance } from '../types/truffle-contracts/ShareFactory';\nimport { ShareRegistryContract, ShareRegistryInstance } from '../types/truffle-contracts/ShareRegistry';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { storeIpfsHash } = require('../truffle-config.js'); // one dirs up, because it is compiled into ./dist/migrations\n\nconst Share: ShareContract = artifacts.require('Share');\nconst ShareFactory: ShareFactoryContract = artifacts.require('ShareFactory');\nconst ShareRegistry: ShareRegistryContract = artifacts.require('ShareRegistry');\nconst GateKeeper: GateKeeperContract = artifacts.require('GateKeeper');\n\nconst DECIMALS = 4;\nconst ZERO = Web3.utils.toBN(0);\nconst TWO = Web3.utils.toBN(10 ** DECIMALS * 2);\nconst THREE = Web3.utils.toBN(10 ** DECIMALS * 3);\nconst FIVE = Web3.utils.toBN(10 ** DECIMALS * 5);\nconst UINTMAX = Web3.utils.toBN(2).pow(Web3.utils.toBN(256)).sub(Web3.utils.toBN(1));\n\ncontract('Share', (accounts) => {\n  let gateKeeper: GateKeeperInstance;\n  let currency: ShareInstance;\n  let currencyFactory: ShareFactoryInstance;\n  let currencyRegistry: ShareRegistryInstance;\n\n  async function verifyApproval(tx: Truffle.TransactionResponse, from: string, to: string, amount: BN) {\n    const allowance = await currency.allowance(accounts[0], accounts[1]);\n    assert(allowance.eq(amount), `Allowance of ${allowance.toString()} should be ${amount.toString()}`);\n    testEvent(tx, 'Approval', {\n      owner: from,\n      spender: to,\n      value: amount.toString(),\n    });\n  }\n\n  before(async function () {\n    gateKeeper = await GateKeeper.new();\n    currencyRegistry = await ShareRegistry.new(gateKeeper.address);\n    await createPermission(gateKeeper, currencyRegistry, 'LIST_TOKEN_ROLE', accounts[0], accounts[0]);\n    currencyFactory = await ShareFactory.new(currencyRegistry.address, gateKeeper.address);\n    await createPermission(gateKeeper, currencyFactory, 'CREATE_TOKEN_ROLE', accounts[0], accounts[0]);\n    await grantPermission(gateKeeper, currencyRegistry, 'LIST_TOKEN_ROLE', currencyFactory.address);\n    await grantPermission(gateKeeper, gateKeeper, 'CREATE_PERMISSIONS_ROLE', currencyFactory.address);\n    await createPermission(gateKeeper, currencyFactory, 'UPDATE_UIFIELDDEFINITIONS_ROLE', accounts[0], accounts[0]);\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const hash = await storeIpfsHash(require('../contracts/share/UIDefinitions.json'));\n    await currencyFactory.setUIFieldDefinitionsHash(hash);\n    const tx = await currencyFactory.createToken(faker.finance.currencyName(), DECIMALS);\n    const currencyAddress = getNewAddressFromEvents(tx, 'TokenCreated');\n    // tslint:disable-next-line: no-any\n    currency = await ((Share.at(currencyAddress) as any) as Promise<ShareInstance>);\n  });\n\n  describe('totalSupply()', () => {\n    it('should have initial supply of 0', async () => {\n      const totalSupply = await currency.totalSupply();\n      assert(totalSupply.eq(ZERO));\n    });\n  });\n\n  describe('balanceOf(owner)', () => {\n    it('should have correct initial balances', async () => {\n      const balance = await currency.balanceOf(accounts[0]);\n      assert(balance.eq(ZERO));\n    });\n  });\n\n  describe('allowance(owner, spender)', () => {\n    it('should have correct initial allowance', async () => {\n      const allowance = await currency.allowance(accounts[0], accounts[1]);\n      assert(allowance.eq(ZERO));\n    });\n\n    it('should return the correct allowance', async () => {\n      const tx = await currency.approve(accounts[1], THREE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], THREE);\n    });\n  });\n\n  describe('approve(spender, value)', () => {\n    it('should return true when approving 0', async () => {\n      assert.isTrue(await currency.approve.call(accounts[1], ZERO, { from: accounts[0] }));\n      const tx = await currency.approve(accounts[1], ZERO, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], ZERO);\n    });\n\n    it('should return true when approving', async () => {\n      assert.isTrue(await currency.approve.call(accounts[1], THREE, { from: accounts[0] }));\n      const tx = await currency.approve(accounts[1], THREE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], THREE);\n    });\n\n    it('should return true when updating approval to the same', async () => {\n      assert.isTrue(await currency.approve.call(accounts[1], THREE, { from: accounts[0] }));\n      const tx = await currency.approve(accounts[1], THREE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], THREE);\n    });\n\n    it('should return true when updating approval to less', async () => {\n      assert.isTrue(await currency.approve.call(accounts[1], TWO, { from: accounts[0] }));\n      const tx = await currency.approve(accounts[1], TWO, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], TWO);\n    });\n\n    it('should return true when updating approval to more', async () => {\n      assert.isTrue(await currency.approve.call(accounts[1], FIVE, { from: accounts[0] }));\n      const tx = await currency.approve(accounts[1], FIVE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], FIVE);\n    });\n\n    it('should return true when updating approval to 0', async () => {\n      assert.isTrue(await currency.approve.call(accounts[1], ZERO, { from: accounts[0] }));\n      const tx = await currency.approve(accounts[1], ZERO, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], ZERO);\n    });\n\n    it('should fire Approval event', async () => {\n      const tx = await currency.approve(accounts[1], FIVE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], FIVE);\n    });\n\n    it('should fire Approval when allowance was set to 0', async () => {\n      const tx = await currency.approve(accounts[1], ZERO, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], ZERO);\n    });\n\n    it('should fire Approval even when allowance did not change', async () => {\n      let tx = await currency.approve(accounts[1], THREE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], THREE);\n      tx = await currency.approve(accounts[1], THREE, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], THREE);\n    });\n  });\n\n  describe('increaseApproval(spender, value)', () => {\n    it('should return true when increasing approval', async () => {\n      await currency.approve(accounts[1], THREE, { from: accounts[0] });\n      assert.isTrue(await currency.increaseApproval.call(accounts[1], TWO, { from: accounts[0] }));\n      const tx = await currency.increaseApproval(accounts[1], TWO, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], FIVE);\n    });\n\n    it('should revert when approval cannot be increased', async function () {\n      await currency.approve(accounts[1], FIVE, { from: accounts[0] });\n      await testRevert(\n        currency.increaseApproval(accounts[1], UINTMAX, { from: accounts[0] }),\n        'VM Exception while processing transaction: revert SafeMath: addition overflow'\n      );\n    });\n  });\n\n  describe('decreaseApproval(spender, value)', () => {\n    it('should return true when decreasing approval', async () => {\n      await currency.approve(accounts[1], FIVE, { from: accounts[0] });\n      assert.isTrue(await currency.decreaseApproval.call(accounts[1], TWO, { from: accounts[0] }));\n      const tx = await currency.decreaseApproval(accounts[1], TWO, { from: accounts[0] });\n      await verifyApproval(tx, accounts[0], accounts[1], THREE);\n    });\n  });\n\n  describe('getUIFieldDefinitionsHash()', () => {\n    it('the factory has UI definitions', async () => {\n      const uiFieldDefinitionsHash = await currencyFactory.getUIFieldDefinitionsHash();\n      assert.isNotNull(uiFieldDefinitionsHash);\n    });\n    it('the currency has the same UI definitions', async () => {\n      const factoryUiFieldDefinitionsHash = await currencyFactory.getUIFieldDefinitionsHash();\n      const uiFieldDefinitionsHash = await currency._uiFieldDefinitionsHash();\n      assert.equal(uiFieldDefinitionsHash, factoryUiFieldDefinitionsHash);\n    });\n  });\n\n  describe('mint(address _to, uint256 _amount)', () => {\n    it('mint new tokens', async () => {\n      const balanceBefore = await currency.balanceOf(accounts[1]);\n      assert.equal(balanceBefore.toNumber(), 0);\n      const tx = await currency.mint(accounts[1], FIVE);\n      testEvent(tx, 'Mint', { to: accounts[1], amount: FIVE.toString() });\n      testEvent(tx, 'Transfer', {\n        from: '0x0000000000000000000000000000000000000000',\n        to: accounts[1],\n        value: FIVE.toString(),\n      });\n      const balanceAfter = await currency.balanceOf(accounts[1]);\n      assert.equal(balanceAfter.toNumber(), FIVE.toNumber());\n    });\n  });\n\n  describe('burn(address _from, uint256 _amount)', () => {\n    it('burn tokens', async () => {\n      await currency.mint(accounts[2], FIVE);\n      const balanceBefore = await currency.balanceOf(accounts[2]);\n      assert.equal(balanceBefore.toNumber(), FIVE.toNumber());\n      const tx = await currency.burn(accounts[2], TWO);\n      testEvent(tx, 'Burn', { from: accounts[2], amount: TWO.toString() });\n      testEvent(tx, 'Transfer', {\n        from: accounts[2],\n        to: '0x0000000000000000000000000000000000000000',\n        value: TWO.toString(),\n      });\n      const balanceAfter = await currency.balanceOf(accounts[2]);\n      assert.equal(balanceAfter.toNumber(), THREE.toNumber());\n    });\n  });\n\n  describe('transfer(address _to, uint256 _value)', () => {\n    it('transfer tokens', async () => {\n      await currency.mint(accounts[3], FIVE);\n      const balanceBefore = await currency.balanceOf(accounts[3]);\n      assert.equal(balanceBefore.toNumber(), FIVE.toNumber());\n      const tx = await currency.transfer(accounts[4], TWO, { from: accounts[3] });\n      testEvent(tx, 'Transfer', {\n        from: accounts[3],\n        to: accounts[4],\n        value: TWO.toString(),\n      });\n      const balanceAfterFrom = await currency.balanceOf(accounts[3]);\n      assert.equal(balanceAfterFrom.toNumber(), THREE.toNumber());\n      const balanceAfterTo = await currency.balanceOf(accounts[4]);\n      assert.equal(balanceAfterTo.toNumber(), TWO.toNumber());\n    });\n  });\n\n  describe('transferWithData(address _to, uint256 _value, bytes _data)', () => {\n    it('transfer tokens with data', async () => {\n      await currency.mint(accounts[5], FIVE);\n      const balanceBefore = await currency.balanceOf(accounts[5]);\n      assert.equal(balanceBefore.toNumber(), FIVE.toNumber());\n      const tx = await currency.transferWithData(accounts[6], THREE, Web3.utils.asciiToHex('some-payment-reference'), {\n        from: accounts[5],\n      });\n      testEvent(tx, 'Transfer', {\n        from: accounts[5],\n        to: accounts[6],\n        value: THREE.toString(),\n      });\n      testEvent(tx, 'TransferData', {\n        from: accounts[5],\n        to: accounts[6],\n        data: Web3.utils.asciiToHex('some-payment-reference'),\n      });\n      const balanceAfter0 = await currency.balanceOf(accounts[5]);\n      assert.equal(balanceAfter0.toNumber(), TWO.toNumber());\n      const balanceAfter1 = await currency.balanceOf(accounts[6]);\n      assert.equal(balanceAfter1.toNumber(), THREE.toNumber());\n    });\n  });\n\n  describe('transferFrom (address _from, address _to, uint256 _value )', () => {\n    it('transfer tokens from', async () => {\n      await currency.mint(accounts[8], FIVE);\n      const balanceBefore1 = await currency.balanceOf(accounts[8]);\n      assert.equal(balanceBefore1.toNumber(), FIVE.toNumber());\n      const balanceBefore2 = await currency.balanceOf(accounts[7]);\n      assert.equal(balanceBefore2.toNumber(), ZERO.toNumber());\n      await currency.approve(accounts[0], FIVE, { from: accounts[8] });\n      const tx = await currency.transferFrom(accounts[8], accounts[7], THREE);\n      testEvent(tx, 'Transfer', {\n        from: accounts[8],\n        to: accounts[7],\n        value: THREE.toString(),\n      });\n      const balanceAfter0 = await currency.balanceOf(accounts[8]);\n      assert.equal(balanceAfter0.toNumber(), TWO.toNumber());\n      const balanceAfter1 = await currency.balanceOf(accounts[7]);\n      assert.equal(balanceAfter1.toNumber(), THREE.toNumber());\n    });\n  });\n\n  describe('transferFromWithData(address _from,address _to,uint256 _value,bytes _data)', () => {\n    it('transfer tokens from with data', async () => {\n      await currency.mint(accounts[8], THREE); // TWO from previous test\n      const balanceBefore1 = await currency.balanceOf(accounts[8]);\n      assert.equal(balanceBefore1.toNumber(), FIVE.toNumber());\n      const balanceBefore2 = await currency.balanceOf(accounts[9]);\n      assert.equal(balanceBefore2.toNumber(), ZERO.toNumber());\n      await currency.approve(accounts[0], THREE, { from: accounts[8] });\n      const tx = await currency.transferFromWithData(\n        accounts[8],\n        accounts[9],\n        THREE,\n        Web3.utils.asciiToHex('some-payment-reference')\n      );\n      testEvent(tx, 'Transfer', {\n        from: accounts[8],\n        to: accounts[9],\n        value: THREE.toString(),\n      });\n      testEvent(tx, 'TransferData', {\n        from: accounts[8],\n        to: accounts[9],\n        data: Web3.utils.asciiToHex('some-payment-reference'),\n      });\n      const balanceAfter0 = await currency.balanceOf(accounts[8]);\n      assert.equal(balanceAfter0.toNumber(), TWO.toNumber());\n      const balanceAfter1 = await currency.balanceOf(accounts[9]);\n      assert.equal(balanceAfter1.toNumber(), THREE.toNumber());\n    });\n  });\n});\n"]}