{"version":3,"file":"generic.js","sourceRoot":"","sources":["../../test/generic.ts"],"names":[],"mappings":";;AAAA,+EAAuF;AAKvF,MAAM,UAAU,GAAuB,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AACvE,MAAM,cAAc,GAA2B,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACnF,MAAM,eAAe,GAA4B,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAEtF,QAAQ,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,EAAE;IAC/B,IAAI,UAA8B,CAAC;IACnC,IAAI,cAAsC,CAAC;IAC3C,IAAI,eAAwC,CAAC;IAE7C,MAAM,CAAC,KAAK;QACV,UAAU,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,CAAC;QACpC,eAAe,GAAG,MAAM,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,yCAAgB,CAAC,UAAU,EAAE,eAAe,EAAE,0BAA0B,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,cAAc,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;QACvF,MAAM,yCAAgB,CAAC,UAAU,EAAE,cAAc,EAAE,0BAA0B,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzG,MAAM,yCAAgB,CAAC,UAAU,EAAE,cAAc,EAAE,gCAAgC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/G,MAAM,wCAAe,CAAC,UAAU,EAAE,UAAU,EAAE,yBAAyB,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;QACjG,MAAM,wCAAe,CAAC,UAAU,EAAE,eAAe,EAAE,0BAA0B,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;IACzG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,gDAAgD,CAAC,CAAC;IACxG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createPermission, grantPermission } from '@settlemint/enteth-migration-utils';\nimport { GateKeeperContract, GateKeeperInstance } from '../types/truffle-contracts/GateKeeper';\nimport { GenericFactoryContract, GenericFactoryInstance } from '../types/truffle-contracts/GenericFactory';\nimport { GenericRegistryContract, GenericRegistryInstance } from '../types/truffle-contracts/GenericRegistry';\n\nconst GateKeeper: GateKeeperContract = artifacts.require('GateKeeper');\nconst GenericFactory: GenericFactoryContract = artifacts.require('GenericFactory');\nconst GenericRegistry: GenericRegistryContract = artifacts.require('GenericRegistry');\n\ncontract('Generic', (accounts) => {\n  let gateKeeper: GateKeeperInstance;\n  let genericFactory: GenericFactoryInstance;\n  let genericRegistry: GenericRegistryInstance;\n\n  before(async function () {\n    gateKeeper = await GateKeeper.new();\n    genericRegistry = await GenericRegistry.new(gateKeeper.address);\n    await createPermission(gateKeeper, genericRegistry, 'INSERT_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n    genericFactory = await GenericFactory.new(gateKeeper.address, genericRegistry.address);\n    await createPermission(gateKeeper, genericFactory, 'CREATE_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n    await createPermission(gateKeeper, genericFactory, 'UPDATE_UIFIELDDEFINITIONS_ROLE', accounts[0], accounts[0]);\n    await grantPermission(gateKeeper, gateKeeper, 'CREATE_PERMISSIONS_ROLE', genericFactory.address);\n    await grantPermission(gateKeeper, genericRegistry, 'INSERT_STATEMACHINE_ROLE', genericFactory.address);\n  });\n\n  it('can create a new generic', async () => {\n    await genericFactory.create('test', accounts[0], 5, 'QmdB3bmb8dohiWo52QQyX1huxfwod7XAYu2aBJU8pFyhQ3');\n  });\n});\n"]}