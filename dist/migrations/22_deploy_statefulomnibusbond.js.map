{"version":3,"file":"22_deploy_statefulomnibusbond.js","sourceRoot":"","sources":["../../migrations/22_deploy_statefulomnibusbond.ts"],"names":[],"mappings":"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","sourcesContent":["import dayjs from 'dayjs';\nimport faker from 'faker';\nimport web3 from 'web3';\n\nimport {\n  createPermission,\n  grantPermission,\n  storeUIDefinitions,\n  getNewAddressFromEvents,\n} from '@settlemint/enteth-migration-utils';\n\nimport { AdminRoleRegistryContract } from '../types/truffle-contracts/AdminRoleRegistry';\nimport { GateKeeperContract } from '../types/truffle-contracts/GateKeeper';\nimport { MakerRoleRegistryContract } from '../types/truffle-contracts/MakerRoleRegistry';\nimport { StatefulOmnibusBondContract } from '../types/truffle-contracts/StatefulOmnibusBond';\nimport { StatefulOmnibusBondFactoryContract } from '../types/truffle-contracts/StatefulOmnibusBondFactory';\nimport { BondManagerFactoryContract } from '../types/truffle-contracts/BondManagerFactory';\nimport { StatefulOmnibusBondRegistryContract } from '../types/truffle-contracts/StatefulOmnibusBondRegistry';\nimport { BondManagerRegistryContract } from 'types/truffle-contracts';\n\nconst GateKeeper: GateKeeperContract = artifacts.require('GateKeeper');\nconst StatefulOmnibusBondRegistry: StatefulOmnibusBondRegistryContract = artifacts.require(\n  'StatefulOmnibusBondRegistry'\n);\n\nconst BondManagerRegistry: BondManagerRegistryContract = artifacts.require('BondManagerRegistry');\nconst StatefulOmnibusBond: StatefulOmnibusBondContract = artifacts.require('StatefulOmnibusBond');\nconst StatefulOmnibusBondFactory: StatefulOmnibusBondFactoryContract = artifacts.require('StatefulOmnibusBondFactory');\nconst BondManagerFactory: BondManagerFactoryContract = artifacts.require('BondManagerFactory');\nconst AdminRoleRegistry: AdminRoleRegistryContract = artifacts.require('AdminRoleRegistry');\nconst MakerRoleRegistry: MakerRoleRegistryContract = artifacts.require('MakerRoleRegistry');\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { enabledFeatures, storeIpfsHash } = require('../../truffle-config.js'); // two dirs up, because it is compiled into ./dist/migrations\n\nmodule.exports = async (deployer: Truffle.Deployer, network: string, accounts: string[]) => {\n  if (enabledFeatures().includes('STATEFULOMNIBUSBONDS')) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const uiDefinitionsStatefulOmnibusBond = require('../../contracts/statefulomnibusbonds/UIDefinitionsSOB.json');\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const uiDefinitionsBondManager = require('../../contracts/statefulomnibusbonds/UIDefinitionsBondManager.json');\n\n    const dGateKeeper = await GateKeeper.deployed();\n\n    await deployer.deploy(StatefulOmnibusBondRegistry, dGateKeeper.address);\n    const deployedSOBRegistry = await StatefulOmnibusBondRegistry.deployed();\n\n    await deployer.deploy(BondManagerRegistry, dGateKeeper.address);\n    const deployedBMRegistry = await BondManagerRegistry.deployed();\n\n    await createPermission(dGateKeeper, deployedSOBRegistry, 'INSERT_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n\n    await createPermission(dGateKeeper, deployedBMRegistry, 'INSERT_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n\n    await deployer.deploy(BondManagerFactory, dGateKeeper.address, deployedBMRegistry.address);\n    const deployedBMFactory = await BondManagerFactory.deployed();\n\n    await createPermission(dGateKeeper, deployedBMFactory, 'UPDATE_UIFIELDDEFINITIONS_ROLE', accounts[0], accounts[0]);\n\n    // set the permissions on the factory\n    await grantPermission(dGateKeeper, dGateKeeper, 'CREATE_PERMISSIONS_ROLE', deployedBMFactory.address);\n    await grantPermission(dGateKeeper, deployedBMRegistry, 'INSERT_STATEMACHINE_ROLE', deployedBMFactory.address);\n\n    if (Object.keys(uiDefinitionsBondManager).length) {\n      const hash = storeIpfsHash\n        ? await storeIpfsHash(uiDefinitionsBondManager)\n        : await storeUIDefinitions(uiDefinitionsBondManager);\n      await deployedBMFactory.setUIFieldDefinitionsHash(hash);\n    }\n\n    await deployer.deploy(\n      StatefulOmnibusBondFactory,\n      dGateKeeper.address,\n      deployedSOBRegistry.address,\n      deployedBMFactory.address\n    );\n    const deployedSOBFactory = await StatefulOmnibusBondFactory.deployed();\n\n    // Give admin permission to accounts[0]\n    await createPermission(dGateKeeper, deployedSOBFactory, 'CREATE_STATEMACHINE_ROLE', accounts[0], accounts[0]);\n    await createPermission(dGateKeeper, deployedSOBFactory, 'UPDATE_UIFIELDDEFINITIONS_ROLE', accounts[0], accounts[0]);\n\n    // give permission to the SOB factory to create a BondManager\n    await createPermission(\n      dGateKeeper,\n      deployedBMFactory,\n      'CREATE_STATEMACHINE_ROLE',\n      accounts[0],\n      deployedSOBFactory.address\n    );\n\n    // Set create expense permissions on the relevant role registries\n    await grantPermission(dGateKeeper, deployedSOBFactory, 'CREATE_STATEMACHINE_ROLE', AdminRoleRegistry.address);\n    await grantPermission(dGateKeeper, deployedSOBFactory, 'CREATE_STATEMACHINE_ROLE', MakerRoleRegistry.address);\n\n    // set the permissions on the factory\n    await grantPermission(dGateKeeper, dGateKeeper, 'CREATE_PERMISSIONS_ROLE', deployedSOBFactory.address);\n    await grantPermission(dGateKeeper, deployedSOBRegistry, 'INSERT_STATEMACHINE_ROLE', deployedSOBFactory.address);\n\n    if (Object.keys(uiDefinitionsStatefulOmnibusBond).length) {\n      const hash = storeIpfsHash\n        ? await storeIpfsHash(uiDefinitionsStatefulOmnibusBond)\n        : await storeUIDefinitions(uiDefinitionsStatefulOmnibusBond);\n      await deployedSOBFactory.setUIFieldDefinitionsHash(hash);\n    }\n\n    // deploy example contracts\n    for (let i = 0; i < 3; i++) {\n      const interest = (faker.random.number(15) + 1) * 100;\n      const issuanceDate = dayjs();\n      const duration = (i + 1) * 12;\n      const maturityDate = issuanceDate.add(duration, 'month');\n      const periodString = i % 2 === 0 ? 'ANN' : 'SEMI';\n      const parValue = (i + 1) * 1000;\n      const issuer = faker.company.companyName();\n\n      const statefulOmnibusBond = {\n        name: `BOND ${interest}% ${maturityDate.format('YY-MM-DD')} ${periodString}`,\n        isin: faker.finance.iban(),\n        symbol: issuer.substring(0, 4),\n        frequency: periodString,\n        interest,\n        decimals: 2,\n        issuer: issuer,\n        maturityDate: maturityDate.unix(),\n        issuanceDate: issuanceDate.unix(),\n        currency: 'Singapore Dollar',\n        parValue,\n        couponValue: Math.floor((interest / 100) * parValue),\n      };\n\n      const ipfsHash = await storeIpfsHash({\n        isin: statefulOmnibusBond.isin,\n        issuer: statefulOmnibusBond.issuer,\n        maturityDate: statefulOmnibusBond.maturityDate,\n        issuanceDate: statefulOmnibusBond.issuanceDate,\n        currency: 'Singapore Dollar',\n      });\n\n      const tx = await deployedSOBFactory.create(\n        statefulOmnibusBond.name,\n        statefulOmnibusBond.symbol,\n        statefulOmnibusBond.parValue,\n        statefulOmnibusBond.interest,\n        statefulOmnibusBond.decimals,\n        web3.utils.toHex(statefulOmnibusBond.frequency),\n        ipfsHash\n      );\n\n      if (i === 0) {\n        const sobAddress = getNewAddressFromEvents(tx, 'StatefulOmnibusBondCreated');\n        // tslint:disable-next-line: no-any\n        const sob = await StatefulOmnibusBond.at(sobAddress);\n        await sob.transitionState(await sob.STATE_TO_REVIEW());\n        await sob.transitionState(await sob.STATE_ACTIVE());\n      }\n    }\n  }\n};\n"]}