{"version":3,"file":"15_deploy_statefulbonds.js","sourceRoot":"","sources":["../../migrations/15_deploy_statefulbonds.ts"],"names":[],"mappings":"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","sourcesContent":["import { deployStateMachineSystem, getNewAddressFromEvents } from '@settlemint/enteth-migration-utils';\nimport dayjs from 'dayjs';\nimport faker from 'faker';\n\nimport { AdminRoleRegistryContract } from '../types/truffle-contracts/AdminRoleRegistry';\nimport { CheckerRoleRegistryContract } from '../types/truffle-contracts/CheckerRoleRegistry';\nimport { GateKeeperContract } from '../types/truffle-contracts/GateKeeper';\nimport { MakerRoleRegistryContract } from '../types/truffle-contracts/MakerRoleRegistry';\nimport { StatefulBondContract } from '../types/truffle-contracts/StatefulBond';\nimport { StatefulBondFactoryContract } from '../types/truffle-contracts/StatefulBondFactory';\nimport { StatefulBondRegistryContract } from '../types/truffle-contracts/StatefulBondRegistry';\n\nconst GateKeeper: GateKeeperContract = artifacts.require('GateKeeper');\nconst StatefulBond: StatefulBondContract = artifacts.require('StatefulBond');\nconst StatefulBondRegistry: StatefulBondRegistryContract = artifacts.require('StatefulBondRegistry');\nconst StatefulBondFactory: StatefulBondFactoryContract = artifacts.require('StatefulBondFactory');\nconst AdminRoleRegistry: AdminRoleRegistryContract = artifacts.require('AdminRoleRegistry');\nconst MakerRoleRegistry: MakerRoleRegistryContract = artifacts.require('MakerRoleRegistry');\nconst CheckerRoleRegistry: CheckerRoleRegistryContract = artifacts.require('CheckerRoleRegistry');\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { enabledFeatures, storeIpfsHash } = require('../../truffle-config.js'); // two dirs up, because it is compiled into ./dist/migrations\n\nmodule.exports = async (deployer: Truffle.Deployer, network: string, accounts: string[]) => {\n  if (enabledFeatures().includes('STATEFULBONDS')) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const uiDefinitions = require('../../contracts/statefulbonds/UIDefinitions.json');\n\n    const { factory } = await deployStateMachineSystem(\n      deployer,\n      accounts,\n      GateKeeper,\n      StatefulBondRegistry,\n      StatefulBondFactory,\n      [AdminRoleRegistry, MakerRoleRegistry, CheckerRoleRegistry],\n      uiDefinitions,\n      storeIpfsHash\n    );\n\n    for (let i = 0; i < 5; i++) {\n      const interest = (faker.random.number(15) + 1) * 100;\n      const issuanceDate = dayjs();\n      const duration = (i + 1) * 12;\n      const maturityDate = issuanceDate.add(duration, 'month');\n      const periodString = i % 2 === 0 ? 'ANN' : 'SEMI';\n      const parValue = (i + 1) * 1000;\n\n      const statefulBond = {\n        name: `BOND ${interest}% ${maturityDate.format('YY-MM-DD')} ${periodString}`,\n        isin: faker.finance.iban(),\n        frequency: periodString,\n        interest,\n        decimals: 2,\n        issuer: faker.company.companyName(),\n        maturityDate: maturityDate.unix(),\n        issuanceDate: issuanceDate.unix(),\n        currency: 'Singapore Dollar',\n        parValue,\n        inFlight: i === 3 ? web3.utils.toHex('YES') : web3.utils.toHex('NO'),\n        couponValue: Math.floor((interest / 100) * parValue),\n      };\n\n      const ipfsHash = await storeIpfsHash({\n        isin: statefulBond.isin,\n        issuer: statefulBond.issuer,\n        maturityDate: statefulBond.maturityDate,\n        issuanceDate: statefulBond.issuanceDate,\n        currency: 'Singapore Dollar',\n      });\n      const tx = await factory.create(\n        statefulBond.name,\n        statefulBond.parValue,\n        statefulBond.interest,\n        statefulBond.decimals,\n        statefulBond.inFlight,\n        web3.utils.toHex(statefulBond.frequency),\n        ipfsHash\n      );\n\n      if (i !== 4) {\n        const bondAddress = getNewAddressFromEvents(tx, 'TokenCreated');\n        // tslint:disable-next-line: no-any\n        const bond = await StatefulBond.at(bondAddress);\n        await bond.transitionState(await bond.STATE_TO_REVIEW());\n        await bond.launch(dayjs().unix());\n        await bond.transitionState(await bond.STATE_READY_FOR_TOKENIZATION());\n        await bond.requestTokenization(faker.random.number(1000) * 100);\n        await bond.transitionState(await bond.STATE_TOKENIZATION_REQUEST());\n        await bond.transitionState(await bond.STATE_TOKENIZATION_APPROVED());\n      }\n    }\n  }\n};\n"]}